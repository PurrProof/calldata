import React, { forwardRef, useImperativeHandle } from "react";

interface Example {
  id: number;
  name: string;
  signature: string;
  calldata: string;
}

interface ExampleLoaderProps {
  onLoadExample: (signature: string, calldata: string) => void;
}

const examples = [
  {
    id: 1,
    name: "Example 1",
    signature:
      "function swap(uint256 A,(uint256,bytes,uint256),(uint256,bytes,bytes,uint256),uint256)",
    calldata:
      "0xd2f393e7" +
      "0000000000000000000000000000000000000000000000000000000000000001" +
      "0000000000000000000000000000000000000000000000000000000000000080" +
      "0000000000000000000000000000000000000000000000000000000000000120" +
      "0000000000000000000000000000000000000000000000000000000000000006" +
      "0000000000000000000000000000000000000000000000000000000000000002" +
      "0000000000000000000000000000000000000000000000000000000000000060" +
      "0000000000000000000000000000000000000000000000000000000000000003" +
      "0000000000000000000000000000000000000000000000000000000000000003" +
      "1111110000000000000000000000000000000000000000000000000000000000" +
      "0000000000000000000000000000000000000000000000000000000000000004" +
      "0000000000000000000000000000000000000000000000000000000000000080" +
      "00000000000000000000000000000000000000000000000000000000000000c0" +
      "0000000000000000000000000000000000000000000000000000000000000005" +
      "0000000000000000000000000000000000000000000000000000000000000003" +
      "2222220000000000000000000000000000000000000000000000000000000000" +
      "0000000000000000000000000000000000000000000000000000000000000003" +
      "3333330000000000000000000000000000000000000000000000000000000000",
  },
  {
    //https://medium.com/@ljmanini/abi-encoding-deep-dive-fbb750facea9
    id: 2,
    name: "Example 2",
    signature:
      "function swap((bytes32,uint8,address,address,uint256,bytes), (address,bool,address,bool), uint256, uint256)",
    calldata:
      "0x52bbbe2900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000008d7e58c0ebf988dbb31a993696286106964dd4f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000008d7e58c0ebf988dbb31a993696286106964dd4f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b3a7f984c82f6ffa3d428ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff929a9b6d40e4723f690db77a7ebb65d3254be1e00002000000000000000004d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000677d4fbbcdd9093d725b0042081ab0b67c63d12100000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    // https://degatchi.com/articles/reading-raw-evm-calldata
    id: 3,
    name: "Example 3",
    //signature: "function multicall(bytes[] data)",
    signature: "function swap(bytes[] data)",
    calldata:
      //"0xac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000008413ead56200000000000000000000000061fe7a5257b963f231e1ef6e22cb3b4c6e28c531000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000831162ce86bc88052f80fd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001648831645600000000000000000000000061fe7a5257b963f231e1ef6e22cb3b4c6e28c531000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000002710fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf178000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e3bdc25349196582d720000000000000000000000000000000000000000000000000c249fdd32778000000000000000000000000000000000000000000000002e1e525c2ef9dcec50c53000000000000000000000000000000000000000000000000c1cd7c9adfb0d9dc000000000000000000000000ed6c2cb9bf89a2d290e59025837454bf1f144c5000000000000000000000000000000000000000000000000000000000635ce8bf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000",
      "0x27640bc4000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000008413ead56200000000000000000000000061fe7a5257b963f231e1ef6e22cb3b4c6e28c531000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000831162ce86bc88052f80fd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001648831645600000000000000000000000061fe7a5257b963f231e1ef6e22cb3b4c6e28c531000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000002710fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf178000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e3bdc25349196582d720000000000000000000000000000000000000000000000000c249fdd32778000000000000000000000000000000000000000000000002e1e525c2ef9dcec50c53000000000000000000000000000000000000000000000000c1cd7c9adfb0d9dc000000000000000000000000ed6c2cb9bf89a2d290e59025837454bf1f144c5000000000000000000000000000000000000000000000000000000000635ce8bf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000",
  },
];

const ExampleLoader = forwardRef((props: ExampleLoaderProps, ref) => {
  const { onLoadExample } = props;

  const loadExample = (example: Example) => {
    onLoadExample(example.signature, example.calldata);
  };

  useImperativeHandle(ref, () => ({
    loadExample: (example: Example) => loadExample(example),
  }));

  return (
    <div>
      {examples.map((example) => (
        <button key={example.id} onClick={() => loadExample(example)}>
          Load {example.name}
        </button>
      ))}
    </div>
  );
});

export default ExampleLoader;
